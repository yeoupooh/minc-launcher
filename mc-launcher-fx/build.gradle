apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'signing'

sourceCompatibility = 1.8
mainClassName = 'com.subakstudio.mclauncher.Main'
def propfilename = "/keystore/mc_launcher.gradle.properties"
def keystorefile = "/keystore/mc_launcher_keystore.jks"

import org.apache.tools.ant.taskdefs.condition.Os
apply from: "http://dl.bintray.com/content/shemnon/javafx-gradle/8.1.1/javafx.plugin"

repositories {
    jcenter()
    mavenCentral()
}

project.ext {
    logbackVersion = '1.1.3'
    jacksonVersion = '2.7.1'
}

dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.13'

    // sfl4j is just a facade for loggers. To actually get logging to work, you need to
    // tie it in with some actual implementation, e.g., logback
    compile group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
    compile group: 'ch.qos.logback', name: 'logback-core', version: logbackVersion

    // Easy Logging
    compile 'org.projectlombok:lombok:1.16.6'

    // OkHttp for Http Client
    compile 'com.squareup.okhttp:okhttp:2.7.0'

    // Jackson for JSON
    compile "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    compile "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"

    // JavaFX components
    compile 'org.controlsfx:controlsfx:8.40.10'

    // Apache Common IO
    compile 'commons-io:commons-io:2.4'

    compile group: 'org.controlsfx', name: 'controlsfx', version: '8.40.10'
	compile group: 'org.jfxtras', name: 'jfxtras-all', version: '8.0-r4'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile 'org.assertj:assertj-core:3.2.0'
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

task loadProperties {
	def home = System.properties['user.home']
	def fileProp = home + propfilename;
	def fileKey = home + keystorefile;
	Properties props = new Properties()
	
	if (!file(fileProp).exists()) {
		if(!file(home + "/keystore").exists()) {
			file(home + "/keystore").mkdir()
		}
		if(file(fileProp).createNewFile()) {
			println "File " + fileProp + " Created"
			if (Os.isFamily(Os.FAMILY_WINDOWS)) {
				println "*** WINDOWS "
				println "You should write properties on your own (releasePass, storePass & mc_key_url)"
                props.setProperty("releasePass", "")
				props.setProperty("storePass", "")
				props.setProperty("mc_key_url", "")
				props.store(new FileOutputStream(fileProp), null)
                throw new Exception("Fix file " + fileProp);
			} else if (Os.isFamily(Os.FAMILY_UNIX)) {
				println "*** LINUX "
				props.setProperty("releasePass", "$System.env.MC_SIGN_RELEASE_PSWD")
				props.setProperty("storePass", "$System.env.MC_SIGN_STORE_PSWD")
				props.setProperty("mc_key_url", "$System.env.MC_KEYSTORE_LOCATION")
				props.store(new FileOutputStream(fileProp), null)
			}
		} else {
			println "Error creating file!";
		}
	}
	
	props.load(new FileInputStream(fileProp));
	project.ext.releasePass = props.getProperty('releasePass');
	project.ext.storePass = props.getProperty('storePass');
	project.ext.key_file_url = props.getProperty('mc_key_url');
	
	def f = new File(fileKey);
	if (!f.exists()) {
        if(key_file_url == null) {
            throw new Exception("Wrong key download location in " + propfilename);
        } else {
		  println key_file_url;
		  new URL(key_file_url).withInputStream{ i -> f.withOutputStream{ it << i }}
	   }
    }
}

build.dependsOn loadProperties

javafx {
	javaRuntime = System.properties['JAVA_HOME']
	appID 'MC-Launcher'
	appName 'MC-Launcher'
	mainClass = mainClassName
	
	jvmArgs = ['-XX:+AggressiveOpts', '-XX:CompileThreshold=1']
	systemProperties = ['prism.disableRegionCaching':'true']
	arguments = ['-l', '--fast']

	// Generate key: keytool -genkey -alias release -keyalg RSA -keystore keystore.jks -keysize 2048
	releaseKey {
		alias = 'release'
		keyPass = getProjectProperty('releasePass')
		keyStore = file("${System.properties['user.home']}"+keystorefile)
		storePass = getProjectProperty('storePass')
	}
	signingMode 'release'
}

String getProjectProperty(String propertyName) {
	project.hasProperty(propertyName) ? project.property(propertyName) : null
}